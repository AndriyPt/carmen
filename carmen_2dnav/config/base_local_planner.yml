TrajectoryPlannerROS:
        # Robot Configuration Parameters
        acc_lim_x: 1.0 # aceleration limit in x direction meters/sec^2
        acc_lim_y: 0.05 # aceleration limit in y direction meters/sec^2
        acc_lim_theta: 0.1 #rotational acceleration limit of the robot in radians/sec^2
        max_vel_x: 0.2 #maximum forward velocity allowed for the base in meters/sec
        min_vel_x: 0.05 #minimum forward velocity allowed for the base in meters/sec
                        #(used to overcome friction)
        max_vel_theta: 0.15 # max rotational velocity allowed for the base in radians/sec
        min_vel_theta: -0.15 # min rotational velocity allowed for the base in radians/sec
        min_in_place_rotational_vel: 0.05 #min in-place rotational velocity in rad/sec
        escape_vel: -0.15 # Speed used for driving during escapes in meters/sec
        holonomic_robot: false # if the robot is holonomic, define also y_vels - strafing velocities
        # Goal Tolerance Parameters
        yaw_goal_tolerance: 0.20 # tolerance in radians when achieving the goal
        xy_goal_tolerance: 0.250 # tolerance in meters when achieving the goal
        latch_xy_goal_tolerance: true # set to falso to prevent robot from in-place rotation when
                                  #it reaches the goal xy location
        # Forward Simulation Parameters
        sim_time: 1.5 # trajectory forward-simulation time  in seconds
        sim_granularity: 0.25 # the step size, in meters, between points of trajectory
        angular_sim_granularity: 0.2 # the step size, in radians, between angular samples of trajectory
        vx_samples: 20 # the number of samples to use when exploring the x velocity space
        vtheta_samples: 40 # the number of samples to use when exploring the theta velocity space
        controller_frequency: 2.0 # the frequency at which this controller will be called in Hz.
        # Trajectory scoring parameters
        meter_scoring: true # Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells. Cells are assumed by default (false).
        occdist_scale:  0.1 #The weighting for how much the controller should attempt to avoid obstacles. default 0.01
        pdist_scale: 0.75  #     The weighting for how much the controller should stay close to the path it was given . default 0.6
        gdist_scale: 1.0 #     The weighting for how much the controller should attempt to reach its local goal, also controls speed  default 0.8
        heading_lookahead: 0.325  #How far to look ahead in meters when scoring different in-place-rotation trajectories
        heading_scoring: false  #Whether to score based on the robot's heading to the path or its distance from the path. default false
        heading_scoring_timestep: 0.8   #How far to look ahead in time in seconds along the simulated trajectory when using heading scoring (double, default: 0.8)
        dwa: false #whether to use the DWA or Trajectory Rollout
        publish_cost_grid_pc: false # whether or not to publish the cost grid that the planner will use when planning
        global_frame_id: odom # the frame to set for the cost_cloud
        oscillation_reset_dist: 0.2 #How far the robot must travel in meters before oscillation flags are reset
        prune_plan: true #whether or not to eat up the plan as the robot moves along the path
                       #If set to true, points will fall off the end of the plan once the robot moves 1 meter past them
        #See base_local_planner::TrajectoryPlanner Class Reference
        esca1pe_reset_dist: 0.2 #The distance the robot must travel before it can leave escape mode
        escape_reset_theta: 0.03 # The angle that robot must turn before it can leave escape mode
        simple_attractor: false # Enables simple attraction to a goal point
        #dwa_local_planner parameters
        goal_distance_bias: 10 #In DWA the weighting for how much the controller should attempt to reach its local goal, also controls speed (double, default: 24.0)
        path_distance_bias: 22 #In DWA the weighting for how much the controller should stay close to the path it was given (double, default: 32.0)
