//.$file${../src::communication::communication_base.cpp} vvvvvvvvvvvvvvvvvvvvv
//
// Model: carmen.qm
// File:  ${../src::communication::communication_base.cpp}
//
// This code has been generated by QM 5.1.0 <www.state-machine.com/qm/>.
// DO NOT EDIT SECTIONS BETWEEN THE COMMENTS "$...vvv".."$end...^^^".
// All your changes in these sections will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//.$endhead${../src::communication::communication_base.cpp} ^^^^^^^^^^^^^^^^^^
#include "communication_base.h"
#include "communication_events.h"
#include "common_signals.h"

//.$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//. Check for the minimum required QP version
#if (QP_VERSION < 680U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.8.0 or higher required
#endif
//.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//.$define${application::CommunicationBase} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace carmen_hardware {

//.${application::CommunicationBase} .........................................
//.${application::CommunicationBas~::SM} .....................................
Q_STATE_DEF(CommunicationBase, initial) {
    //.${application::CommunicationBas~::SM::initial}
    return tran(&idle);
}
//.${application::CommunicationBas~::SM::idle} ...............................
Q_STATE_DEF(CommunicationBase, idle) {
    QP::QState status_;
    switch (e->sig) {
        //.${application::CommunicationBas~::SM::idle::COM_SET_IMU}
        case COM_SET_IMU_SIG: {
            this->setImuHandler(Q_EVT_CAST(SetImuEvt));
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${application::CommunicationBas~::SM::idle::COM_SET_ENCODERS}
        case COM_SET_ENCODERS_SIG: {
            this->setEncodersHandler();
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${application::CommunicationBas~::SM::idle::COM_COMMAND}
        case COM_COMMAND_SIG: {
            this->commandHandler();
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

} // namespace carmen_hardware
//.$enddef${application::CommunicationBase} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
